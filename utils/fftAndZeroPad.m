function [reconImage] = fftAndZeroPad(inputData, dv26flag)  % input data should be parsed as (freq, phase) or (freq, phase, coils)     dataSize = size(inputData);  nc = 0;  if(length(dataSize) == 2)    nc = 1;  else    nc = dataSize(3);  end      nf = dataSize(1);  nx = round(sqrt(dataSize(2)));  ny = nx; % hopefully these are the same    %disp(dataSize);  disp(['frequency samples = ', num2str(nf)]);  disp(['X samples = ', num2str(nx)]);  disp(['Y samples = ', num2str(ny)]);  disp(['channels = ', num2str(nc)]);      %  % step 1: parse, apodize, compensate for RF chopping  %  apodizedData = zeros([nf, nx, ny, nc]);  windowWidth = nf/4;  for kk = 1:nc    for ii = 1:ny      for jj = 1:nx        ind = jj + (ii-1)*ny;        rfChopping = (-1)^ind;        rfChopping = 1;                if(dv26flag == 1)           thisFid = squeeze(inputData(ind, :, kk)) * rfChopping;        else           thisFid = squeeze(inputData(:, ind, kk)) * rfChopping;        end                fidWindow = exp(-(1:nf) / windowWidth);                if(dv26flag == 1)          apodizedSpec = thisFid .* fidWindow;        else          apodizedSpec = thisFid .* fidWindow';        end        apodizedData(:,jj,ii,kk) = apodizedSpec;        %apodizedData(:,jj,ii,kk) = thisFid;       end    end  end        %  % step 2: zero pad spatial dimensions (2X)  %  zeroPaddedData = padarray(apodizedData, [0 nx/2 ny/2 0], 0, 'both');   %  % step 3: FFT each dimension (aside from coils)    %  fftData = zeros(size(zeroPaddedData));  for kk = 1:nc    singleCoilData = squeeze(zeroPaddedData(:, :, :, kk));    singleCoilFFTData = fftnc(singleCoilData);    fftData(:, :, :, kk) = singleCoilFFTData;      end
    %  % step 4: take a window about the midpoint of spectra, add these points  %  integratedData = zeros([nx ny nc]);  integrationWindow = round(nf/8)  for kk = 1:nc    for ii = 1:2*ny      for jj = 1:2*nx       thisSpec = abs(squeeze(fftData(:, jj, ii, kk)));       specInsideWindow = thisSpec((nf/2-round(integrationWindow/2)):(nf/2+round(integrationWindow/2)));       summedSpec = squeeze(sum(specInsideWindow));       integratedData(jj, ii, kk) = summedSpec;             end    end   end    reconImage = integratedData;    
endfunction
