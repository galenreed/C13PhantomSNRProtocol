function [reconImage] = fftAndZeroPad(inputData, params, header)  % fftAndZeroPad  % written by Galen Reed 09/18  % this is a simple routine to reconstruct MRSI data from fidcsi.e  % frequency domain filtering, and kx and ky zero padding are applied prior to FT  %  %  % input data should be parsed as (freq, phase) or (freq, phase, coils)     %  % read headers, define FID filter and t, f, domains  %    dataSize = size(inputData);  nc = 0;  if(length(dataSize) == 2)    nc = 1;  else    nc = dataSize(3);  end    nx = round(sqrt(dataSize(1)));    nf = dataSize(2);  ny = nx; % hopefully these are the same  nex = header.image.nex;    disp(['frequency samples = ', num2str(nf)]);  disp(['X samples = ', num2str(nx)]);  disp(['Y samples = ', num2str(ny)]);  disp(['channels = ', num2str(nc)]);  disp(['nex = ', num2str(nex)]);      sweepWidth = header.image.user0;  FIDTimeDomain = linspace(0, nf/sweepWidth, nf);  fidWindow = exp(-FIDTimeDomain * params.lineBroadening);  %  % step 1: parse, compensate for RF chopping  %        apodizedData = zeros([nf, nx, ny, nc]);  summedFIDs = zeros([1 nf]);  summedApodizedFIDs = zeros([1 nf]);    for kk = 1:nc    for ii = 1:ny      for jj = 1:nx        ind = jj + (ii-1)*ny;                %NOTE: FIDcsi adds RF chopping when opnex>1        %an improvement would be to only perform this correction        % if the header indicates nex>1        rfChopping = (-1)^ind;        if(nex>1)          rfChopping = 1;        end        thisFid = squeeze(inputData(ind, :, kk)) * rfChopping;                % window the FID with a filter.         apodizedFID = thisFid .* fidWindow;        apodizedData(:,jj,ii,kk) = apodizedFID;                summedFIDs = summedFIDs + thisFid;        summedApodizedFIDs = summedApodizedFIDs + apodizedFID;      end    end  end        %  % step 2: zero pad spatial dimensions (2X)  %  zeroPaddedData = padarray(apodizedData, [0 nx/2 ny/2 0], 0, 'both');   %  % step 3: FFT each dimension (aside from coils)    %  fftData = zeros(size(zeroPaddedData));  for kk = 1:nc    singleCoilData = squeeze(zeroPaddedData(:, :, :, kk));    singleCoilFFTData = fftnc(singleCoilData);    fftData(:, :, :, kk) = abs(singleCoilFFTData);  end     reconImage = fftData; end