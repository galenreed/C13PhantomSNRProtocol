function [mask, noise] = creatMaskAndCalculateNoise(inputImage, params)  % creatMaskAndCalculateNoise  % written by Galen Reed 10/26/18      % take a small patch in the top left corner of the image  topLeftCorner = inputImage(1:params.noiseRegionSize, 1:params.noiseRegionSize);  stdCornerNoise = std(topLeftCorner(:));  meanCornerNoise = mean(topLeftCorner(:));  % now use the mean and std of the corner to generate a mask of the phantom  dirtyMask = inputImage>(meanCornerNoise + 10*stdCornerNoise);  structuringElement = strel('line',5,90);    % clean up the mask a bit.   erodedMask = imerode(dirtyMask, structuringElement);  dilatedMask = imdilate(erodedMask, structuringElement);    % use pixels outside mask to calculate noise.   % we run the dilation again just to ensure no signal pixels contaminate measurement  doubleDilatedMask = imdilate(dilatedMask, structuringElement);  noisePixels = inputImage(find(doubleDilatedMask == 0));    % output  noise = std(noisePixels(:));  mask = dilatedMask;    if(params.doPlot ==1)    figure();    subplot(2,2,1);    imagesc(dirtyMask);    title('dirtyMask');    subplot(2,2,2);    imagesc(erodedMask);    title('erodedMask');    subplot(2,2,3);    imagesc(dilatedMask);    title('dilated mask');    subplot(2,2,4);    imagesc(doubleDilatedMask);    title('doubleDilatedMask');  end  end